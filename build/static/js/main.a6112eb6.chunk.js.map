{"version":3,"sources":["components/tile/Tile.js","components/tileList/TileList.js","components/contactPicker/ContactPicker.js","components/appointmentForm/AppointmentForm.js","containers/appointmentsPage/AppointmentsPage.js","components/contactForm/ContactForm.js","containers/contactsPage/ContactsPage.js","App.js","index.js"],"names":["Tile","value","array","Object","values","className","map","data","index","TileList","objArr","ContactPicker","props","contacts","onChange","contact","name","AppointmentForm","title","setTitle","setContact","date","setDate","time","setTime","handleSubmit","onSubmit","type","target","min","Date","toLocaleDateString","split","month","day","year","padStart","getTodayString","AppointmentsPage","appointments","addAppointment","useState","e","preventDefault","ContactForm","setName","phone","setPhone","email","setEmail","placeholder","required","pattern","ContactsPage","addContact","duplicate","setDuplicate","useEffect","App","setContacts","setAppointments","ROUTES","to","activeClassName","exact","path","prev","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a6112eb6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const Tile = ({value}) => {\r\n  const array = Object.values(value);\r\n  return (\r\n    <div className=\"tile-container\">\r\n      {array.map((data, index) => {\r\n        if (index === 0) {\r\n          return <p className=\"tile-title\" key={index}>{data}</p>;\r\n        } else {\r\n          return <p className=\"tile\">{data}</p>;\r\n        }\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Tile } from '../tile/Tile';\r\n\r\nexport const TileList = ({objArr}) => {\r\n  return (\r\n    <div>\r\n      {objArr.map((value, index) => <Tile value={value} key={index} />)}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const ContactPicker = (props) => {\r\n  const contacts = props.contacts;\r\n  const onChange = props.onChange;\r\n\r\n  return (\r\n    <select onChange={onChange}>\r\n      <option value=\"\">Select a contact</option>\r\n      {contacts.map(contact => <option value={contact.name}>{contact.name}</option>)}\r\n    </select>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { ContactPicker } from \"../contactPicker/ContactPicker\";\r\n\r\nexport const AppointmentForm = ({\r\n  contacts,\r\n  title,\r\n  setTitle,\r\n  contact,\r\n  setContact,\r\n  date,\r\n  setDate,\r\n  time,\r\n  setTime,\r\n  handleSubmit,\r\n}) => {\r\n  const getTodayString = () => {\r\n    const [month, day, year] = new Date()\r\n      .toLocaleDateString(\"en-US\")\r\n      .split(\"/\");\r\n    return `${year}-${month.padStart(2, \"0\")}-${day.padStart(2, \"0\")}`;\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={title}\r\n        onChange={({ target }) => {\r\n          setTitle(target.value);\r\n        }}\r\n      />\r\n      <input\r\n        type=\"date\"\r\n        value={date}\r\n        min={getTodayString()}\r\n        onChange={({ target }) => {\r\n          setDate(target.value);\r\n        }}\r\n      />\r\n      <input\r\n        type=\"time\"\r\n        value={time}\r\n        onChange={({ target }) => {\r\n          setTime(target.value);\r\n        }}\r\n      />\r\n      <ContactPicker\r\n        contacts={contacts}\r\n        value={contact}\r\n        onChange={({ target }) => {\r\n          setContact(target.value);\r\n        }}\r\n      />\r\n      <input type=\"submit\" />\r\n    </form>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\nimport { AppointmentForm } from \"../../components/appointmentForm/AppointmentForm\";\r\n\r\nexport const AppointmentsPage = (props) => {\r\n  /*\r\n  Define state variables for \r\n  appointment info\r\n  */\r\n const contacts = props.contacts;\r\n const appointments = props.appointments;\r\n const addAppointment = props.addAppointment;\r\n\r\n const [title, setTitle] = useState('');\r\n const [contact, setContact] = useState('');\r\n const [date, setDate] = useState('');\r\n const [time, setTime] = useState('');\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data  \r\n    */\r\n    addAppointment(title, contact, date, time);\r\n    setTitle('');\r\n    setContact('');\r\n    setDate('');\r\n    setTime('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Appointment</h2>\r\n        <AppointmentForm\r\n          title={title}\r\n          contact={contact}\r\n          date={date}\r\n          time={time}\r\n          setTitle={setTitle}\r\n          setContact={setContact}\r\n          setDate={setDate}\r\n          setTime={setTime}\r\n          handleSubmit={handleSubmit}\r\n          contacts={contacts}\r\n        />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Appointments</h2>\r\n        <TileList\r\n          objArr={appointments}\r\n        />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const ContactForm = ({\r\n  name,\r\n  setName,\r\n  phone,\r\n  setPhone,\r\n  email,\r\n  setEmail,\r\n  handleSubmit,\r\n}) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={name}\r\n        onChange={({ target }) => {\r\n          setName(target.value);\r\n        }}\r\n        placeholder='Name'\r\n        required\r\n      />\r\n      <input\r\n        type=\"tel\"\r\n        value={phone}\r\n        pattern=\"[1-9][0-9]{2}-[1-9][0-9]{2}-[0-9]{4}\"\r\n        onChange={({ target }) => {\r\n          setPhone(target.value);\r\n        }}\r\n        placeholder='Phone Number'\r\n        required\r\n      />\r\n      <input\r\n        type=\"email\"\r\n        value={email}\r\n        onChange={({ target }) => {\r\n          setEmail(target.value);\r\n        }}\r\n        placeholder='Email Address'\r\n        required\r\n      />\r\n      <input\r\n        type=\"submit\"\r\n      />\r\n    </form>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { ContactForm } from '../../components/contactForm/ContactForm';\r\nimport { TileList } from '../../components/tileList/TileList';\r\n\r\nexport const ContactsPage = (props) => {\r\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n const contacts = props.contacts;\r\n const addContact = props.addContact;\r\n\r\n const [name, setName] = useState('');\r\n const [phone, setPhone] = useState('');\r\n const [email, setEmail] = useState('');\r\n const [duplicate, setDuplicate] = useState(false);\r\n\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n   if (!duplicate) {\r\n     addContact(name, phone, email);\r\n     setName('');\r\n     setPhone('');\r\n     setEmail('');\r\n   }\r\n  };\r\n\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n\r\n  useEffect(() => {\r\n    for (const contact of contacts) {\r\n      if (name === contact.name) {\r\n        setDuplicate(true);\r\n      }\r\n      return;\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2> \r\n        <ContactForm\r\n          name={name}\r\n          phone={phone}\r\n          email={email}\r\n          setName={setName}\r\n          setPhone={setPhone}\r\n          setEmail={setEmail}\r\n          handleSubmit={handleSubmit}\r\n         />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList\r\n          objArr={props.contacts}\r\n         />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Switch, Route, Redirect, NavLink } from \"react-router-dom\";\r\n\r\nimport { AppointmentsPage } from \"./containers/appointmentsPage/AppointmentsPage\";\r\nimport { ContactsPage } from \"./containers/contactsPage/ContactsPage\";\r\n\r\nfunction App() {\r\n  /*\r\n  Define state variables for \r\n  contacts and appointments \r\n  */\r\n const [ contacts, setContacts ] = useState([]);\r\n const [ appointments, setAppointments ] = useState([]);\r\n\r\n\r\n  const ROUTES = {\r\n    CONTACTS: \"/contacts\",\r\n    APPOINTMENTS: \"/appointments\",\r\n  };\r\n\r\n  /*\r\n  Implement functions to add data to\r\n  contacts and appointments\r\n  */\r\n\r\n  const addContact = (name, phone, email) => {\r\n    setContacts(prev => [...prev, {name, phone, email}]);\r\n  }\r\n\r\n  const addAppointment = (title, contact, date, time) => {\r\n    setAppointments(prev => [...prev, {title, contact, date, time}]);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <nav>\r\n        <NavLink to={ROUTES.CONTACTS} activeClassName=\"active\">\r\n          Contacts\r\n        </NavLink>\r\n        <NavLink to={ROUTES.APPOINTMENTS} activeClassName=\"active\">\r\n          Appointments\r\n        </NavLink>\r\n      </nav>\r\n      <main>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Redirect to={ROUTES.CONTACTS} />\r\n          </Route>\r\n          <Route path={ROUTES.CONTACTS}>\r\n             {/* Add props to ContactsPage */}\r\n            <ContactsPage \r\n            contacts={contacts}\r\n            addContact={addContact}\r\n            />\r\n          </Route>\r\n          <Route path={ROUTES.APPOINTMENTS}>\r\n            {/* Add props to AppointmentsPage */}\r\n            <AppointmentsPage\r\n            appointments={appointments}\r\n            contacts={contacts}\r\n            addAppointment={addAppointment}\r\n             />\r\n          </Route>\r\n        </Switch>\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <App />\r\n  </Router>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}